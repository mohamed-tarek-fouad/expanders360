generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ADMIN
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Client {
  id            String   @id @default(cuid())
  companyName   String
  contactEmail  String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  projects      Project[]

  @@map("clients")
}

model Project {
  id              String        @id @default(cuid())
  clientId        String
  country         String
  servicesNeeded  Json          // JSON array of services
  budget          Decimal       @db.Decimal(10, 2)
  status          ProjectStatus @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  matches         Match[]

  @@map("projects")
}

model Vendor {
  id                  String   @id @default(cuid())
  name                String
  countriesSupported  Json     // JSON array of countries
  servicesOffered     Json     // JSON array of services
  rating              Decimal  @db.Decimal(3, 2) // Rating from 0.00 to 5.00
  responseSlaHours    Int      // Response SLA in hours
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  matches             Match[]

  @@map("vendors")
}

model Match {
  id        String   @id @default(cuid())
  projectId String
  vendorId  String
  score     Decimal  @db.Decimal(5, 2) // Match score from 0.00 to 100.00
  createdAt DateTime @default(now())
  
  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint to prevent duplicate matches
  @@unique([projectId, vendorId])
  @@map("matches")
}